openapi: 3.0.3
info:
  title: Inmobiliaria Bonpland API
  version: 1.0.0
  description: Welcome to the Bonpland Real Estate API documentation. This guide provides
    detailed information on all available endpoints, including the HTTP methods they
    accept, the parameters they require, and the response formats they return. This
    documentation is designed to be a useful reference for both developers who maintain
    and extend the API, and frontend developers who consume it in their client applications.
    If you have any questions or encounter any problems, feel free to contact the
    development team.
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
paths:
  /api/v1/login/:
    post:
      operationId: authenticate_user
      description: |-
        Handle POST requests for user authentication.

        This method allows authentication of a user. It waits for a POST request with
        your credentials, validates the information, and then returns a response with
        the authentication tokens if the data is valid or returns an error response
        if it is not.
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
            examples:
              DataValid:
                value:
                  email: user1@email.com
                  password: contraseña1234
                summary: Valid credentials for a user.
                description: |-
                  Valid credentials for a user. The following validations will be applied:
                  - **email:** This field is required and must not exceed 40 characters and must follow standard email format.
                  - **password:** This field is required and should be between 8 and 20 characters. It should not be a common password or contain only numbers.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  access:
                    type: string
                  refresh:
                    type: string
              examples:
                ResponseOk:
                  value:
                    access: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzExMDU0MzYyLCJpYXQiOjE3MTEwNDcxNjIsImp0aSI6IjY0MTE2YzgyYjhmMDQzOWJhNTJkZGZmMzgyNzQ2ZTIwIiwidXNlcl9pZCI6IjJhNmI0NTNiLWZhMmItNDMxOC05YzM1LWIwZTk2ZTg5NGI2MyJ9.gfhWpy5rYY6P3Xrg0usS6j1KhEvF1HqWMiU7AaFkp9A
                    refresh: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcxMTEzMzU2MiwiaWF0IjoxNzExMDQ3MTYyLCJqdGkiOiI2ZTRmNTdkMGJjNTc0NWY0OWMzODg4YjQ2YTM1OTJjNSIsInVzZXJfaWQiOiIyYTZiNDUzYi1mYTJiLTQzMTgtOWMzNS1iMGU5NmU4OTRiNjMifQ.81pQ3WftFZs5O50vGqwY2a6yPkXArQK6WKyrwus3s6A
                  summary: User authenticated
                  description: The user has been authenticated successfully and the
                    access and refresh tokens are returned. The access token is used
                    to authenticate the user in the application, while the refresh
                    token is used to obtain a new access token, each of these tokens
                    contains information about the user, such as the user's identifier,
                    the type of token, the expiration date, and the date of issue.
          description: '**(OK)** Authenticated user.'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
              examples:
                InvalidData:
                  value:
                    code: invalid_request_data
                    detail:
                      email:
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      - El valor ingresado es inválido.
                      - El valor ingresado no puede tener más de 40 caracteres.
                      password:
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      - El valor ingresado es inválido.
                      - El valor ingresado no puede tener más de 20 caracteres.
                      - El valor ingresado debe tener al menos 8 caracteres.
                  summary: Invalid data
                  description: These are the possible error messages for each field.
          description: '**(BAD_REQUEST)** The request data are invalid, error message(s)
            are returned for each field that did not pass the validations.'
        '401':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string
              examples:
                AuthenticationFailed:
                  value:
                    code: authentication_failed
                    detail: Credenciales inválidas.
                  summary: Credentials invalid
                  description: The email or password provided is incorrect.
                UserInactive:
                  value:
                    code: authentication_failed
                    detail: Cuenta del usuario inactiva.
                  summary: Inactive user account
                  description: The user account is inactive.
          description: |-
            **(UNAUTHORIZED)** The user you are trying to authenticate is not authorized, this is due to some of the following reasons.
            - Invalid credentials.
            - The user's account has not been activated.
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: The connection to the database could not be established.
          description: '**(INTERNAL_SERVER_ERROR)** An unexpected error occurred.'
  /api/v1/searcher_user/:
    post:
      operationId: create_searcher_user
      description: |-
        Handle POST requests for searcheruser registration.

        This method allows the registration of a new searcheruser. It waits for a POST
        request with record data, validates the information, and then creates a new
        record if the data is valid or returns an error response if it is not.
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearcherUserRequest'
            examples:
              DataValid:
                value:
                  full_name: Nombre Apellido
                  email: user1@email.com
                  password: contraseña1234
                  confirm_password: contraseña1234
                  profile_data:
                    address: Residencia 1
                    phone_number: +57 3123574898
                summary: Register a new user with role **searcheruser**.
                description: "A valid user registration data. The following validations\
                  \ will be applied:\n- **full_name:** This field is required, must\
                  \ not exceed 40 characters, must not be in use, and must contain\
                  \ letters and spaces.\n- **email:** This field is required and must\
                  \ not exceed 40 characters, must follow standard email format, and\
                  \ must not be in use.\n- **password:** This field is required and\
                  \ should be between 8 and 20 characters. It should not be a common\
                  \ password or contain only numbers. \n- **confirm_password:** This\
                  \ field is required and should match the password field.\n- **address:**\
                  \ This field is required, must not exceed 90 characters, and must\
                  \ not be in use.\n- **phone_number:** This field is required, must\
                  \ not exceed 25 characters, must follow the phone number format,\
                  \ and must not be in use."
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SearcherUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SearcherUserRequest'
        required: true
      responses:
        '201':
          description: '**(CREATED)** User created correctly.'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
              examples:
                InvalidData:
                  value:
                    code: invalid_request_data
                    detail:
                      full_name:
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      - El valor ingresado es inválido.
                      - El valor ingresado no puede tener más de 40 caracteres.
                      - Este nombre ya está en uso.
                      email:
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      - El valor ingresado es inválido.
                      - El valor ingresado no puede tener más de 40 caracteres.
                      - Este correo electrónico ya está en uso.
                      password:
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      - El valor ingresado es inválido.
                      - El valor ingresado no puede tener más de 20 caracteres.
                      - El valor ingresado debe tener al menos 8 caracteres.
                      confirm_password:
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      - La contraseña debe contener al menos una mayuscula o una minuscula.
                      - Esta contraseña es demasiado común.
                      - Las contraseñas no coinciden.
                      profile_data:
                        address:
                        - Este campo es requerido.
                        - Este campo no puede estar en blanco.
                        - Este campo no puede ser nulo.
                        - El valor ingresado es inválido.
                        - El valor ingresado no puede tener más de 90 caracteres.
                        - Esta dirección ya está en uso.
                        phone_number:
                        - Este campo es requerido.
                        - Este campo no puede estar en blanco.
                        - Este campo no puede ser nulo.
                        - El valor ingresado es inválido.
                        - El valor ingresado no puede tener más de 25 caracteres.
                        - Este número de teléfono ya está en uso.
                  summary: Invalid data
                  description: These are the possible error messages for each field.
          description: '**(BAD_REQUEST)** The request data is invalid, error messages
            are returned for each field that did not pass validations.'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
          description: '**(INTERNAL_SERVER_ERROR)** An unexpected error occurred.'
  /api/v1/user/jwt/refresh/:
    post:
      operationId: api_v1_user_jwt_refresh_create
      description: |-
        Handle POST requests for token refresh.

        This method allows refreshing of a user's tokens. It waits for a POST request
        with the access and refresh tokens, validates the information, and then
        returns a response with the new tokens if the data is valid or returns an
        error response if it is not.
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
            examples:
              DataValid:
                value:
                  access: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzA2Mjk2MzI3LCJpYXQiOjE3MDYyODkxMjcsImp0aSI6IjQ0Zjg3MDdjZTdhOTQ0Y2RhYWRlNzlhMDg1OThiY2NkIiwidXNlcl9pZCI6IjUwNTI5MjBjLWE3ZDYtNDM4ZS1iZmQwLWVhNTUyMTM4ODM2YyJ9.-FPGYs1m-SDZDs3FJ3wlnqESVhcIg8oYAgKOFBD6Qic
                  refresh: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcwNjM3NTUyNywiaWF0IjoxNzA2Mjg5MTI3LCJqdGkiOiI3NzE5OGZmM2JkYWQ0MTk5YTExNjcwZGMwMzdmNTM0YyIsInVzZXJfaWQiOiI1MDUyOTIwYy1hN2Q2LTQzOGUtYmZkMC1lYTU1MjEzODgzNmMifQ.dfHpJRflOA1M2BmraxcW401EJvrTqU6HfbVmHHRkF2U
                summary: JWT for user
                description: |-
                  Valid data for the request. The following validations will be applied:
                  - **Access token:** must be a valid token and expired.
                  - **Refresh token:** must be a valid token and not expired.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  access:
                    type: string
                  refresh:
                    type: string
              examples:
                ResponseOk:
                  value:
                    access: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzExMDU0MzYyLCJpYXQiOjE3MTEwNDcxNjIsImp0aSI6IjY0MTE2YzgyYjhmMDQzOWJhNTJkZGZmMzgyNzQ2ZTIwIiwidXNlcl9pZCI6IjJhNmI0NTNiLWZhMmItNDMxOC05YzM1LWIwZTk2ZTg5NGI2MyJ9.gfhWpy5rYY6P3Xrg0usS6j1KhEvF1HqWMiU7AaFkp9A
                    refresh: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcxMTEzMzU2MiwiaWF0IjoxNzExMDQ3MTYyLCJqdGkiOiI2ZTRmNTdkMGJjNTc0NWY0OWMzODg4YjQ2YTM1OTJjNSIsInVzZXJfaWQiOiIyYTZiNDUzYi1mYTJiLTQzMTgtOWMzNS1iMGU5NmU4OTRiNjMifQ.81pQ3WftFZs5O50vGqwY2a6yPkXArQK6WKyrwus3s6A
                  summary: Valid request
          description: '**(OK)** New user tokens.'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
                    properties:
                      access:
                        type: array
                        items:
                          type: string
                      refresh:
                        type: array
                        items:
                          type: string
              examples:
                InvalidData1:
                  value:
                    code: invalid_request_data
                    detail:
                      access:
                      - Token is not expired.
                  summary: Access token not expired
                InvalidData2:
                  value:
                    code: invalid_request_data
                    detail:
                      refresh:
                      - Token is expired.
                  summary: Refresh token expired
                InvalidData3:
                  value:
                    code: invalid_request_data
                    detail:
                      access:
                      - Token is invalid.
                      refresh:
                      - Token is invalid.
                  summary: Invalid tokens
                InvalidData4:
                  value:
                    code: invalid_request_data
                    detail:
                      access:
                      - This field is required.
                      - This field may not be blank.
                      - This field may not be null.
                      refresh:
                      - This field is required.
                      - This field may not be blank.
                      - This field may not be null.
                  summary: Invalid request data
          description: '**(BAD_REQUEST)** The request data are invalid, error message(s)
            are returned for each field that did not pass the validations.'
        '401':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string or object
              examples:
                UserNotFound:
                  value:
                    code: user_not_found
                    detail: User 2a6b453b-fa2b-4318-9c35-b0e96e894b63 not found.
                  summary: The user of the tokens was not found
                TokenNotFound:
                  value:
                    code: token_not_found
                    detail: Tokens do not exist.
                  summary: The tokens were not foun
                TokenError:
                  value:
                    code: token_error
                    detail:
                      message: The token does not match the user's last tokens.
                      token_type: Access
                      token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcxMTEzMzU2MiwiaWF0IjoxNzExMDQ3MTYyLCJqdGkiOiI2ZTRmNTdkMGJjNTc0NWY0OWMzODg4YjQ2YTM1OTJjNSIsInVzZXJfaWQiOiIyYTZiNDUzYi1mYTJiLTQzMTgtOWMzNS1iMGU5NmU4OTRiNjMifQ.81pQ3WftFZs5O50vGqwY2a6yPkXArQK6WKyrwus3s6A
                  summary: The tokens do not match the user's last tokens
          description: |-
            **(UNAUTHORIZED)** Tokens cannot be refreshed, this is due to one of the following reasons.
            - The user of the tokens was not found.
            - The tokens do not match the user's last tokens.
            - The tokens were not found.
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
          description: '**(INTERNAL_SERVER_ERROR)** An unexpected error occurred.'
components:
  schemas:
    AuthenticationRequest:
      type: object
      description: |-
        Handles the data for user authentication. Checks that the provided email and
        password meet the necessary requirements.
      properties:
        email:
          type: string
          minLength: 1
          pattern: ^([A-Za-z0-9]+[-_.])*[A-Za-z0-9]+@[A-Za-z]+(\.[A-Z|a-z]{2,4}){1,2}$
          maxLength: 40
        password:
          type: string
          writeOnly: true
          minLength: 8
          maxLength: 20
      required:
      - email
      - password
    RefreshTokenRequest:
      type: object
      description: |-
        Handles the data for user token refresh. Checks that the provided access and
        refresh tokens meet the necessary requirements.
      properties:
        refresh:
          type: string
          minLength: 1
        access:
          type: string
          minLength: 1
      required:
      - access
      - refresh
    SearcherUserProfileDataRequest:
      type: object
      description: Defines the fields that are required for the searcher user profile.
      properties:
        address:
          type: string
          minLength: 1
          maxLength: 90
        phone_number:
          type: string
          minLength: 1
          maxLength: 25
      required:
      - address
      - phone_number
    SearcherUserRequest:
      type: object
      description: Defines the fields that are required for the searcher user.
      properties:
        full_name:
          type: string
          minLength: 1
          pattern: ^[A-Za-z\s]+$
          maxLength: 40
        email:
          type: string
          minLength: 1
          pattern: ^([A-Za-z0-9]+[-_.])*[A-Za-z0-9]+@[A-Za-z]+(\.[A-Z|a-z]{2,4}){1,2}$
          maxLength: 40
        password:
          type: string
          writeOnly: true
          minLength: 8
          maxLength: 20
        confirm_password:
          type: string
          writeOnly: true
          minLength: 1
        profile_data:
          $ref: '#/components/schemas/SearcherUserProfileDataRequest'
      required:
      - confirm_password
      - email
      - full_name
      - password
      - profile_data
tags:
- name: Users
  description: It comprises all the endpoints that manage all the functionality related
    to a user in the API.

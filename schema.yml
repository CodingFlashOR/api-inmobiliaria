openapi: 3.0.3
info:
  title: Inmobiliaria Bonpland API
  version: 1.0.0
  description: Welcome to the Bonpland Real Estate API documentation. This guide provides
    detailed information on all available endpoints, including the HTTP methods they
    accept, the parameters they require, and the response formats they return. This
    documentation is designed to be a useful reference for both developers who maintain
    and extend the API, and frontend developers who consume it in their client applications.
    If you have any questions or encounter any problems, feel free to contact the
    development team.
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
paths:
  /api/v1/user/:
    post:
      operationId: user_create
      description: |-
        Handle POST requests for user registration.

        This method allows the registration of a new user. It waits for a POST
        request with a user's registration data, validates the information, and then
        creates a new user if the data is valid or returns an error response if it is
        not.
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              DataValid:
                value:
                  email: user1@example.com
                  password: Aaa123456789
                  confirm_password: Aaa123456789
                summary: Register a new user
                description: |-
                  A valid user registration data. The following validations will be applied:
                  - **Email:** Must be in a valid email format, no longer than 90 characters and not in use.
                  - **Password:** Must be at least 8 characters, not more than 20 characters, and not a common or simple password.
                  - **Confirm Password:** Must match the password.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      security:
      - {}
      responses:
        '201':
          description: '**(CREATED)** User created correctly.'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
              examples:
                EmailInvalid:
                  value:
                    code: invalid_request_data
                    detail:
                      email:
                      - Correo electrónico inválido.
                      password:
                      - La contraseña debe tener al menos 8 caracteres.
                  summary: Invalid request data
                PasswordsNotMatch:
                  value:
                    code: invalid_request_data
                    detail:
                      non_field_errors:
                      - Las contraseñas no coinciden.
                  summary: Passwords do not match
                EmailAlreadyUse:
                  value:
                    code: invalid_request_data
                    detail:
                      email:
                      - Este correo electrónico ya está en uso.
                  summary: Email already in use
          description: '**(BAD_REQUEST)** The request data are invalid, error message(s)
            are returned for each field that did not pass the validations.'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
          description: '**(INTERNAL_SERVER_ERROR)** An unexpected error occurred.'
  /api/v1/user/jwt/refresh/:
    post:
      operationId: user_jwt_refresh_create
      description: |-
        Handle POST requests for token refresh.

        This method allows refreshing of a user's tokens. It waits for a POST request
        with the access and refresh tokens, validates the information, and then
        returns a response with the new tokens if the data is valid or returns an
        error response if it is not.
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
            examples:
              DataValid:
                value:
                  access: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzA2Mjk2MzI3LCJpYXQiOjE3MDYyODkxMjcsImp0aSI6IjQ0Zjg3MDdjZTdhOTQ0Y2RhYWRlNzlhMDg1OThiY2NkIiwidXNlcl9pZCI6IjUwNTI5MjBjLWE3ZDYtNDM4ZS1iZmQwLWVhNTUyMTM4ODM2YyJ9.-FPGYs1m-SDZDs3FJ3wlnqESVhcIg8oYAgKOFBD6Qic
                  refresh: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcwNjM3NTUyNywiaWF0IjoxNzA2Mjg5MTI3LCJqdGkiOiI3NzE5OGZmM2JkYWQ0MTk5YTExNjcwZGMwMzdmNTM0YyIsInVzZXJfaWQiOiI1MDUyOTIwYy1hN2Q2LTQzOGUtYmZkMC1lYTU1MjEzODgzNmMifQ.dfHpJRflOA1M2BmraxcW401EJvrTqU6HfbVmHHRkF2U
                summary: JWT for user
                description: |-
                  Valid data for the request. The following validations will be applied:
                  - **Access token:** must be a valid token and expired.
                  - **Refresh token:** must be a valid token and not expired.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  access:
                    type: string
                  refresh:
                    type: string
              examples:
                ResponseOk:
                  value:
                    access: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzExMDU0MzYyLCJpYXQiOjE3MTEwNDcxNjIsImp0aSI6IjY0MTE2YzgyYjhmMDQzOWJhNTJkZGZmMzgyNzQ2ZTIwIiwidXNlcl9pZCI6IjJhNmI0NTNiLWZhMmItNDMxOC05YzM1LWIwZTk2ZTg5NGI2MyJ9.gfhWpy5rYY6P3Xrg0usS6j1KhEvF1HqWMiU7AaFkp9A
                    refresh: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcxMTEzMzU2MiwiaWF0IjoxNzExMDQ3MTYyLCJqdGkiOiI2ZTRmNTdkMGJjNTc0NWY0OWMzODg4YjQ2YTM1OTJjNSIsInVzZXJfaWQiOiIyYTZiNDUzYi1mYTJiLTQzMTgtOWMzNS1iMGU5NmU4OTRiNjMifQ.81pQ3WftFZs5O50vGqwY2a6yPkXArQK6WKyrwus3s6A
                  summary: Valid request
          description: '**(OK)** New user tokens.'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
                    properties:
                      access:
                        type: array
                        items:
                          type: string
                      refresh:
                        type: array
                        items:
                          type: string
              examples:
                InvalidData1:
                  value:
                    code: invalid_request_data
                    detail:
                      access:
                      - Token is not expired.
                  summary: Access token not expired
                InvalidData2:
                  value:
                    code: invalid_request_data
                    detail:
                      refresh:
                      - Token is expired.
                  summary: Refresh token expired
                InvalidData3:
                  value:
                    code: invalid_request_data
                    detail:
                      access:
                      - Token is invalid.
                      refresh:
                      - Token is invalid.
                  summary: Invalid tokens
                InvalidData4:
                  value:
                    code: invalid_request_data
                    detail:
                      access:
                      - This field is required.
                      - This field may not be blank.
                      - This field may not be null.
                      refresh:
                      - This field is required.
                      - This field may not be blank.
                      - This field may not be null.
                  summary: Invalid request data
          description: '**(BAD_REQUEST)** The request data are invalid, error message(s)
            are returned for each field that did not pass the validations.'
        '401':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string or object
              examples:
                UserNotFound:
                  value:
                    code: user_not_found
                    detail: User 2a6b453b-fa2b-4318-9c35-b0e96e894b63 not found.
                  summary: The user of the tokens was not found
                TokenNotFound:
                  value:
                    code: token_not_found
                    detail: Tokens do not exist.
                  summary: The tokens were not foun
                TokenError:
                  value:
                    code: token_error
                    detail:
                      message: The token does not match the user's last tokens.
                      token_type: Access
                      token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcxMTEzMzU2MiwiaWF0IjoxNzExMDQ3MTYyLCJqdGkiOiI2ZTRmNTdkMGJjNTc0NWY0OWMzODg4YjQ2YTM1OTJjNSIsInVzZXJfaWQiOiIyYTZiNDUzYi1mYTJiLTQzMTgtOWMzNS1iMGU5NmU4OTRiNjMifQ.81pQ3WftFZs5O50vGqwY2a6yPkXArQK6WKyrwus3s6A
                  summary: The tokens do not match the user's last tokens
          description: |-
            **(UNAUTHORIZED)** Tokens cannot be refreshed, this is due to one of the following reasons.
            - The user of the tokens was not found.
            - The tokens do not match the user's last tokens.
            - The tokens were not found.
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
          description: '**(INTERNAL_SERVER_ERROR)** An unexpected error occurred.'
  /api/v1/user/login/:
    post:
      operationId: user_login_create
      description: |-
        Handle POST requests for user authentication.

        This method allows authentication of a user. It waits for a POST request with
        your credentials, validates the information, and then returns a response with
        the authentication tokens if the data is valid or returns an error response
        if it is not.
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
            examples:
              DataValid:
                value:
                  email: user1@example.com
                  password: Aaa123456789
                summary: User authentication
                description: |-
                  Valid credentials for a user. The following validations will be applied:
                  - **Email:** Must be in a valid email format and no longer than 90 characters.
                  - **Password:** Must be at least 8 characters and not more than 20 characters.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  access:
                    type: string
                  refresh:
                    type: string
              examples:
                ResponseOk:
                  value:
                    access: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzExMDU0MzYyLCJpYXQiOjE3MTEwNDcxNjIsImp0aSI6IjY0MTE2YzgyYjhmMDQzOWJhNTJkZGZmMzgyNzQ2ZTIwIiwidXNlcl9pZCI6IjJhNmI0NTNiLWZhMmItNDMxOC05YzM1LWIwZTk2ZTg5NGI2MyJ9.gfhWpy5rYY6P3Xrg0usS6j1KhEvF1HqWMiU7AaFkp9A
                    refresh: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcxMTEzMzU2MiwiaWF0IjoxNzExMDQ3MTYyLCJqdGkiOiI2ZTRmNTdkMGJjNTc0NWY0OWMzODg4YjQ2YTM1OTJjNSIsInVzZXJfaWQiOiIyYTZiNDUzYi1mYTJiLTQzMTgtOWMzNS1iMGU5NmU4OTRiNjMifQ.81pQ3WftFZs5O50vGqwY2a6yPkXArQK6WKyrwus3s6A
                  summary: Valid request
          description: '**(OK)** Authenticated user.'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
              examples:
                EmailInvalid:
                  value:
                    code: invalid_request_data
                    detail:
                      email:
                      - Correo electrónico inválido.
                      password:
                      - La contraseña debe tener al menos 8 caracteres.
                  summary: Invalid request data
                DataInvalid:
                  value:
                    code: invalid_request_data
                    detail:
                      email:
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      password:
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                  summary: Invalid request
          description: '**(BAD_REQUEST)** The request data are invalid, error message(s)
            are returned for each field that did not pass the validations.'
        '401':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string
              examples:
                AuthenticationFailed:
                  value:
                    code: authentication_failed
                    detail: Correo o contraseña inválida.
                  summary: Credentials invalid
                UserInactive:
                  value:
                    code: authentication_failed
                    detail: Cuenta del usuario inactiva.
                  summary: User inactive
          description: |-
            **(UNAUTHORIZED)** The user you are trying to authenticate is not authorized, this is due to some of the following reasons.
            - Invalid credentials.
            - The user's account has not been activated.
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
          description: '**(INTERNAL_SERVER_ERROR)** An unexpected error occurred.'
components:
  schemas:
    AuthenticationRequest:
      type: object
      description: |-
        Handles the data for user authentication. Checks that the provided email and
        password meet the necessary requirements.
      properties:
        email:
          type: string
          minLength: 1
          pattern: ^([A-Za-z0-9]+[-_.])*[A-Za-z0-9]+@[A-Za-z]+(\.[A-Z|a-z]{2,4}){1,2}$
          maxLength: 90
        password:
          type: string
          writeOnly: true
          minLength: 8
          maxLength: 20
      required:
      - email
      - password
    RefreshTokenRequest:
      type: object
      description: |-
        Handles the data for user token refresh. Checks that the provided access and
        refresh tokens meet the necessary requirements.
      properties:
        refresh:
          type: string
          minLength: 1
        access:
          type: string
          minLength: 1
      required:
      - access
      - refresh
    RegisterRequest:
      type: object
      description: |-
        Handles the data for user registration. Checks that the provided email, password,
        and confirm password meet the necessary requirements.
      properties:
        email:
          type: string
          minLength: 1
          pattern: ^([A-Za-z0-9]+[-_.])*[A-Za-z0-9]+@[A-Za-z]+(\.[A-Z|a-z]{2,4}){1,2}$
          maxLength: 90
        password:
          type: string
          writeOnly: true
          minLength: 8
          maxLength: 20
        confirm_password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - confirm_password
      - email
      - password
tags:
- name: Users
  description: It comprises all the endpoints that manage all the functionality related
    to a user in the API.
